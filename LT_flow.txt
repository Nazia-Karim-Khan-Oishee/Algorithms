#include <bits/stdc++.h>

#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL)

#define endl "\n"

using namespace std;
int cap[220][220];
map<int, int> mp;
int n,pr[220];
int bfs(int src,int des)
{
    int vis[220]= {0};
    vis[src]=1;
    pr[src]=-1;
    queue<int>Q;
    Q.push(src);

    while(!Q.empty())
    {
        int u=Q.front();
        Q.pop();
        for(int i=0; i<=2*(n+1); i++)
        {
            if(vis[i] or cap[u][i]<=0) continue;
            Q.push(i);
            vis[i]=1;
            pr[i]=u;

        }
    }

    return vis[des];
}
int maxFlow(int src,int des)
{
    int f=0;
    while(bfs(src,des))
    {

        int path=1e9;
        for(int i=des; i!=src; i=pr[i]) path=min(path,cap[pr[i]][i]);

        for(int i=des; i!=src; i=pr[i])
        {
            int u=pr[i];
            int v=i;
            cap[u][v]-=path;
            cap[v][u]+=path;
        }
        
        f+=path;
    }
    return f;
}


int main()
{
    fastio;
    int t;
    cin >> t;
    int kase=1;
    while (t--)
    {
        cout<<"Case "<<kase++<<": ";
        cin >> n;
        mp.clear();
        for (int i = 1; i <= n; i++)
        {
            int x;
            cin >> x;
            mp[i] = x;
        }
        memset(cap, 0, sizeof(cap));
        memset(pr,-1,sizeof(pr));
        int m;
        cin >> m;
        for (int i = 0; i < m; i++)
        {
            int x, y, z;
            cin>>x>>y>>z;
            cap[x][y+n+1] = z;
            cap[y+n+1][y]=mp[y];
        }
        
        int b, d;
        cin >> b >> d;

        for (int i = 0; i < b; i++)
        {
            int x;
            cin >> x;
            cap[0][x+n+1]=1e9;
            cap[x+n+1][x]=mp[x];
        }
        for (int i = 0; i < d; i++)
        {
            int x;
            cin >> x;
            cap[x][n+1]=1e9;
        }
        cout<<maxFlow(0,n+1)<<endl;
    }
    return 0;
}